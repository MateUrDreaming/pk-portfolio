// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models 
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Portfolio Models 

model WorkExperience {
  id           String   @id @default(cuid())
  title        String   
  company      String
  location     String
  duration     String   
  description  String
  technologies String[] 
  achievements String[] 
  order        Int      @default(0) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([company, title])
  @@map("work_experience")
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  technologies String[] 
  duration     String  
  githubUrl    String?  
  liveUrl      String?  
  highlights   String[] 
  order        Int      @default(0) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([title])
  @@map("project")
}


model Education {
  id            String   @id @default(cuid())
  institution   String
  degree        String? 
  fieldOfStudy  String?  
  location      String
  description   String
  startDate     String   
  endDate       String   
  gpa           String? 
  achievements  String[] 
  order         Int     
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("education")
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  role        String
  company     String
  content     String
  avatar      String?  // Optional avatar URL
  proofUrl    String?  // URL for proof of testimonial (admin only)
  isApproved  Boolean  @default(false) // Admin approval flag
  isUserSubmitted Boolean @default(false) // True if submitted by user, false if created by admin
  order       Int      @default(0) // For ordering testimonials
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("testimonials")
}
